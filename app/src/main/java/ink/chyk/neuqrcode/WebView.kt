package ink.chyk.neuqrcode

import android.annotation.*
import android.graphics.*
import android.webkit.*
import androidx.activity.compose.*
import androidx.compose.runtime.*
import androidx.compose.runtime.saveable.*
import androidx.compose.ui.*
import androidx.compose.ui.viewinterop.*

@Composable
fun CustomWebView(
  url: String,
  cookie: String? = null,
  modifier: Modifier = Modifier,
  onPageStarted: (WebView, String?) -> Unit = { _, _ -> },
  onPageFinished: (WebView, String?) -> Unit = { _, _ -> },
  onBackPressed: () -> Boolean = { false },
  webViewState: MutableState<WebView?> = rememberSaveable { mutableStateOf(null) }
) {
  // Generated by DeepSeek
  AndroidView(
    modifier = modifier,
    factory = { ctx ->
      WebView(ctx).apply {
        // 基础 WebView 配置

        @SuppressLint("SetJavaScriptEnabled")
        settings.javaScriptEnabled = true
        settings.mixedContentMode = WebSettings.MIXED_CONTENT_ALWAYS_ALLOW
        settings.allowFileAccess = true
        settings.allowContentAccess = true
        settings.domStorageEnabled = true
        settings.cacheMode = WebSettings.LOAD_CACHE_ELSE_NETWORK
        settings.setGeolocationDatabasePath(ctx.filesDir.path)

        webViewClient = object : WebViewClient() {
          override fun onPageStarted(view: WebView?, url: String?, favicon: Bitmap?) {
            onPageStarted(this@apply, url)
          }

          override fun onPageFinished(view: WebView?, url: String?) {
            onPageFinished(this@apply, url)
          }
        }

        webChromeClient = object : WebChromeClient() {
          override fun onGeolocationPermissionsShowPrompt(
            origin: String?,
            callback: GeolocationPermissions.Callback?
          ) {
            // https://stackoverflow.com/questions/5329662/android-webview-geolocation
            callback?.invoke(origin, true, false)
          }
        }

        // 设置 Cookie（如果有）
        cookie?.let { setCookieForDomain(url, it) }
        loadUrl(url)
        webViewState.value = this // 存储 WebView 引用
      }
    },
    update = { webView ->
      webView.loadUrl(url) // 更新 URL 时重新加载
    }
  )

  // 处理返回键导航
  BackHandler(enabled = webViewState.value?.canGoBack() == true) {
    if (!onBackPressed()) {
      webViewState.value?.goBack()
    }
  }
}

// 核心 Cookie 设置逻辑
private fun setCookieForDomain(url: String, cookie: String) {
  val cookieManager = CookieManager.getInstance().apply {
    setAcceptCookie(true)
    setCookie(url, cookie)
  }

  cookieManager.flush()
}